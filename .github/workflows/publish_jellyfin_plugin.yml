name: JellyFin Publish Plugin

on:
  push:
    branches:
      - master
      - test
  workflow_dispatch:

env:
  MANIFEST_REPO_NAME: Jellyfin-Plugins
  PLUGIN_NAME: Jellyfin.SmartPlaylist
  CSPROJ_NAME: Jellyfin.Plugin.SmartPlaylist
  PLUGIN_GUID: 5a63fe63-765f-43f7-a129-661e839f83d5
  REPO_URL: https://github.com/JMiles42/jellyfin-smartplaylist2playlistharder-plugin
  TARGET_ABI: "10.9.0.0"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/checkout@v4
        with:
          repository: JMiles42/${{ env.MANIFEST_REPO_NAME }}
          path: ${{ env.MANIFEST_REPO_NAME }}
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
          sparse-checkout: |
            scripts
            manifest.json
            manifest.prerelease.json

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Set Variables
        id: variables
        shell: pwsh
        run: |
          if("${{ github.base_ref }}" -eq "master" -or "${{ github.ref }}" -eq "refs/heads/master" -or "${{ github.base_ref }}" -eq "main" -or "${{ github.ref }}" -eq "refs/heads/main")
          {
            $Manifest="manifest.json";
            $PreRelease = "false";
            $version = ([Xml] (Get-Content .\${{ env.CSPROJ_NAME }}\${{ env.CSPROJ_NAME }}.csproj)).Project.PropertyGroup.Version.ToString()
          }
          else
          {
            $Manifest="manifest.prerelease.json";
            $PreRelease = "true";
            $version = [System.DateTime]::UtcNow.ToString("yyyy.MMdd.HHmm");
          }

          $changeLog = ((Get-Content .\${{ env.CSPROJ_NAME }}\meta.json) | Out-String | ConvertFrom-Json).changelog.Replace([System.Environment]::NewLine, "\n")

          echo "MANIFEST=$Manifest" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append;
          echo "PRE_RELEASE=$PreRelease" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append;
          echo "CHANGE_LOG=$changeLog" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append;

          $timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ");
          echo "TIMESTAMP=$timestamp" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append;

          if($env:PLUGIN_VERSION -ne $null){
            $version = $env:PLUGIN_VERSION;
          }        
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append;
            
      - name: Dotnet Restore
        run: dotnet restore
        continue-on-error: false

      - name: Dotnet Build
        shell: pwsh
        run: |
          Write-Host "Setting version = ${{ steps.variables.outputs.version }}";
          dotnet build --no-restore --configuration Release -p:Version=${{ steps.variables.outputs.version }};
        continue-on-error: false
     
      - name: Dotnet Test
        run: dotnet test --no-restore --verbosity normal
        continue-on-error: false

      - name: Update meta.json
        shell: pwsh
        run: |
          ${{ env.MANIFEST_REPO_NAME }}/scripts/EditMetaJson.ps1 -targetAbi "${{ env.TARGET_ABI }}"`
            -timestamp "${{ steps.variables.outputs.timestamp }}"`
            -version "${{ steps.variables.outputs.version }}"`
            -metaFile "${{ env.CSPROJ_NAME }}/meta.json";

      - name: Upload Plugins
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.variables.outputs.changelog }}
          prerelease: ${{ steps.variables.outputs.pre_release }}
          draft: false
          tag_name: v${{ steps.variables.outputs.version }}
          generate_release_notes: true
          files: |
            ${{ env.CSPROJ_NAME }}/bin/Release/${{ env.PLUGIN_NAME }}@v${{ steps.variables.outputs.version }}.zip
        continue-on-error: false

      - name: Generate and Publish Manifest
        shell: pwsh
        run: |
          $zipFilePath = Resolve-Path "${{ env.CSPROJ_NAME }}/bin/Release/${{ env.PLUGIN_NAME }}@v${{ steps.variables.outputs.version }}.zip";
          $curDir = Get-Location;
          Set-Location "${{ env.MANIFEST_REPO_NAME }}";

          scripts/EditManifestFromFile.ps1 -pluginRepoUrl "${{ env.REPO_URL }}"`
            -pluginZipName "${{ env.PLUGIN_NAME }}"`
            -pluginGuid "${{ env.PLUGIN_GUID }}"`
            -filename "$zipFilePath"`
            -targetAbi "${{ env.TARGET_ABI }}"`
            -timestamp "${{ steps.variables.outputs.timestamp }}"`
            -version "${{ steps.variables.outputs.version }}"`
            -changelog "${{ steps.variables.outputs.change_log }}"`
            -manifestFile "${{ steps.variables.outputs.manifest }}";

          git config --global user.name  'jmiles42-bot'
          git config --global user.email '17088685+JMiles42@users.noreply.github.com'
          git commit -m "Auto Updated by Actions" -- ${{ steps.variables.outputs.manifest }}
          git push
          Set-Location $curDir;
